// Code generated by MockGen. DO NOT EDIT.
// Source: internal/quote/domain/quote.go
//
// Generated by this command:
//
//	mockgen -source=internal/quote/domain/quote.go -destination=internal/quote/domain/mock/quote.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	types "app/internal/quote/types"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockcatalogClient is a mock of catalogClient interface.
type MockcatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockcatalogClientMockRecorder
	isgomock struct{}
}

// MockcatalogClientMockRecorder is the mock recorder for MockcatalogClient.
type MockcatalogClientMockRecorder struct {
	mock *MockcatalogClient
}

// NewMockcatalogClient creates a new mock instance.
func NewMockcatalogClient(ctrl *gomock.Controller) *MockcatalogClient {
	mock := &MockcatalogClient{ctrl: ctrl}
	mock.recorder = &MockcatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcatalogClient) EXPECT() *MockcatalogClientMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockcatalogClient) GetProductByID(ctx context.Context, productID uuid.UUID) (*types.CatalogProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, productID)
	ret0, _ := ret[0].(*types.CatalogProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockcatalogClientMockRecorder) GetProductByID(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockcatalogClient)(nil).GetProductByID), ctx, productID)
}

// MocktaxClient is a mock of taxClient interface.
type MocktaxClient struct {
	ctrl     *gomock.Controller
	recorder *MocktaxClientMockRecorder
	isgomock struct{}
}

// MocktaxClientMockRecorder is the mock recorder for MocktaxClient.
type MocktaxClientMockRecorder struct {
	mock *MocktaxClient
}

// NewMocktaxClient creates a new mock instance.
func NewMocktaxClient(ctrl *gomock.Controller) *MocktaxClient {
	mock := &MocktaxClient{ctrl: ctrl}
	mock.recorder = &MocktaxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktaxClient) EXPECT() *MocktaxClientMockRecorder {
	return m.recorder
}

// CalculateTaxes mocks base method.
func (m *MocktaxClient) CalculateTaxes(ctx context.Context, taxRateID string, amount float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTaxes", ctx, taxRateID, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTaxes indicates an expected call of CalculateTaxes.
func (mr *MocktaxClientMockRecorder) CalculateTaxes(ctx, taxRateID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTaxes", reflect.TypeOf((*MocktaxClient)(nil).CalculateTaxes), ctx, taxRateID, amount)
}

// MockquoteRepository is a mock of quoteRepository interface.
type MockquoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockquoteRepositoryMockRecorder
	isgomock struct{}
}

// MockquoteRepositoryMockRecorder is the mock recorder for MockquoteRepository.
type MockquoteRepositoryMockRecorder struct {
	mock *MockquoteRepository
}

// NewMockquoteRepository creates a new mock instance.
func NewMockquoteRepository(ctrl *gomock.Controller) *MockquoteRepository {
	mock := &MockquoteRepository{ctrl: ctrl}
	mock.recorder = &MockquoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockquoteRepository) EXPECT() *MockquoteRepositoryMockRecorder {
	return m.recorder
}

// FindByCustomerAndStatus mocks base method.
func (m *MockquoteRepository) FindByCustomerAndStatus(ctx context.Context, customerUUID uuid.UUID, status types.QuoteStatus) (*types.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCustomerAndStatus", ctx, customerUUID, status)
	ret0, _ := ret[0].(*types.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCustomerAndStatus indicates an expected call of FindByCustomerAndStatus.
func (mr *MockquoteRepositoryMockRecorder) FindByCustomerAndStatus(ctx, customerUUID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCustomerAndStatus", reflect.TypeOf((*MockquoteRepository)(nil).FindByCustomerAndStatus), ctx, customerUUID, status)
}

// Save mocks base method.
func (m *MockquoteRepository) Save(ctx context.Context, quote *types.Quote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockquoteRepositoryMockRecorder) Save(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockquoteRepository)(nil).Save), ctx, quote)
}
